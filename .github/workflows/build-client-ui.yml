name: Payment Client UI

on:
  push:
    paths:
      - 'payment-client-ui/**'
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      job_to_run:
        description: 'Job to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - build-and-analyze
          - build-and-deploy
env:
  AZURE_CONTAINER_REGISTRY: paymentclientui
  WEBAPP_NAME: payment-client-ui
  WORKING_DIRECTORY: payment-client-ui
  DOCKERFILE: Dockerfile_client_ui

jobs:
  build-and-analyze:
    name: Build and analyze
    runs-on: ubuntu-latest
    if: github.event.inputs.job_to_run == 'build-and-analyze' || github.event.inputs.job_to_run == 'all' || github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}

      #- name: Run tests and generate coverage report
      #  run: npm run test:coverage
      #  working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_PAYMENT_CLIENT_UI }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ${{ env.WORKING_DIRECTORY }}
          args: >
            -Dsonar.projectKey=payment-client-ui
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info

  build-and-deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    if: github.event.inputs.job_to_run == 'build-and-deploy' || github.event.inputs.job_to_run == 'all' || github.event_name == 'push'

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Azure Login registry
        uses: docker/login-action@v2.2.0
        with:
            registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
            username: ${{ secrets.PAYMENTUI_REGISTRY_USERNAME }}
            password: ${{ secrets.PAYMENTUI_REGISTRY_PASSWORD }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.WORKING_DIRECTORY }}
          file: ./${{ env.WORKING_DIRECTORY }}/${{ env.DOCKERFILE }}
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.WEBAPP_NAME }}:${{ github.sha }}
          build-args: |
            KIBANA_DASHBOARD_URL=${{ vars.KIBANA_DASHBOARD_URL }}
            PAYMENT_URL=${{ vars.PAYMENT_URL }}
            PAYMENT_WEBSOCKET_NOTIFICATION=${{ vars.PAYMENT_WEBSOCKET_NOTIFICATION }}
            

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SIDEPROJECTS_CREDENTIALS }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        env:
          IMAGENAME: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.WEBAPP_NAME }}:${{ github.sha }}
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          slot-name: 'production'
          images: ${{ env.IMAGENAME }}